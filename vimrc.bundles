" ==========================================
" bundle 插件管理和配置项
" ==========================================

"------------------------------------------- begin of configs --------------------------------------------

" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
filetype off " required! turn off


" ----------------------------------------------------------------------------
" 使用 vim-plug 管理插件
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/bundle')

" 在文件上自动标记位置，然后跳转
" ,,l 标记行跳转
" ,,w 标记单词进行跳转
" ,,f 搜索字母进行跳转
Plug 'easymotion/vim-easymotion'
nmap <Leader><Leader>l <Plug>(easymotion-overwin-line)


" 给csv的各列分配不同颜色，让没对齐的数据更清晰
Plug 'mechatroner/rainbow_csv'

Plug 'terryma/vim-multiple-cursors'

" 快速搜索文件打开。有个这个之后 :e 不用输入文件路径和全名了。
Plug 'kien/ctrlp.vim'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.d,*.o,*.bin,*.a,*.lib     " MacOSX/Linux

Plug 'Yggdroot/LeaderF', { 'do': './install.sh'  }

let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll|a|o|bin|lib|swp|d)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" 提供一系列doxgen的功能
" :Dox 添加Dox注释
" :DoxAuthor 添加Dox文件和作者信息
" ,d 为当前变量后面创建行内文档
Plug 'vim-scripts/DoxygenToolkit.vim'
function! DoxygenPackage()
  " exec "i <CR>package<CR>"
  exec "normal! O##\<CR>#@package \<CR># "
endfunction
command! -nargs=0 DoxPackage :call DoxygenPackage()
let g:doxygenToolkit_authorName="zhiqiang"
let g:doxygenToolkit_briefTag_funcName="yes"
nmap <leader>df :Dox<CR>
nmap <leader>dm A<TAB><TAB>//!< 
nmap <leader>ds A @snippetdoc snippet/auto.txt 
imap <leader>ds <ESC>A @snippetdoc snippet/auto.txt 
nmap <leader>dc A @copydoc 
imap <leader>ds <ESC>A @snippetdoc snippet/auto.txt 
nmap <leader>dC O/// @copydoc



" F4 切换h/cpp文件，在C++下非常好用
Plug 'zhangzq/CurtineIncSw.vim'
nmap <F4> :call CurtineIncSw()<CR>
imap <F4> <ESC>:call CurtineIncSw()<CR>

" Plug 'nathanaelkane/vim-indent-guides'
" let g:indent_guides_enable_on_vim_startup = 1

" 给缩进显示颜色，会显示灰色的竖线
" Plug 'Yggdroot/indentLine'


" 多语言语法检查
" Plug 'scrooloose/syntastic'
let g:syntastic_error_symbol='>>'
let g:syntastic_warning_symbol='>'
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_enable_highlighting=1

" 最轻量
" 中等
" error code: http://pep8.readthedocs.org/en/latest/intro.html#error-codes
" let g:syntastic_python_checkers=['pep8'] " 使用pyflakes,速度比pylint快
" let g:syntastic_python_checkers=['pyflakes', 'pep8'] " 使用pyflakes,速度比pylint快
let g:syntastic_python_checkers=['pylint'] " 使用pyflakes,速度比pylint快
let g:syntastic_python_pylint_args='-d E266,E401,E402,E501,missing-docstring,no-else-return'
let g:syntastic_python_pep8_args='--ignore=E266,E401,E402,E501'
"--ignore=E501,E225,E124,E712'

" 重量级, 但是足够强大, 定制完成后相当个性化
" pylint codes: http://pylint-messages.wikidot.com/all-codes
" let g:syntastic_python_checkers=['pyflakes', 'pylint'] " 使用pyflakes,速度比pylint快
" let g:syntastic_python_checkers=['pylint'] " 使用pyflakes,速度比pylint快
" let g:syntastic_python_pylint_args='--disable=C0111,R0903,C0301'

let g:syntastic_javascript_checkers = ['jsl', 'jshint']
let g:syntastic_html_checkers=['tidy', 'jshint']
" 修改高亮的背景色, 适应主题
highlight SyntasticErrorSign guifg=white guibg=black

" to see error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5
let g:syntastic_check_on_open = 0

function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nnoremap <Leader>s :call ToggleErrors()<cr>


Plug 'w0rp/ale' 
let g:ale_linters = {'cpp': [], 'c': [], 'python': ['pylint'], }
let g:ale_fixers = { 'javascript': ['eslint'], 'python': ['autopep8'] }
let g:ale_python_pylint_options = '-d broad-except,missing-docstring,too-many-return-statements,no-else-return --good-names=hh,ss,ir,ic,ip,id,today,rt,df,e,idx,np,a,b,c,d,x,y,z,i,j,f,g,k,m,n,g,t,v,o,pt,ot,tt,p,s,di,fp,to,ii,ti,dl,t,td,Log,log,Math,Stockt0,mm,dd,op,yyyy,YYYY,YYYYMMDD,MM,DD,YYYYMM,yyyy,mm,dd,dt,ms --extension-pkg-whitelist=lxml --min-public-methods=1 --max-public-methods=30'
let g:ale_c_gcc_options = '-Wall -O0 -std=c99 -I ~/auto -isystem /opt/include -isystem /opt/auto-stable'
let g:ale_cpp_gcc_options = '-Wall -Wextra -O0 -std=c++14 -I ~/auto -isystem /opt/include -isystem /usr/include/python3.5/ -isystem /usr/local/lib/python3.5/dist-packages/numpy/core/include/ -isystem /opt/3rd/wind/include -isystem /usr/local/lib/python3.5/dist-packages/numpy/core/include/ -isystem /opt/auto-stable' 
let g:ale_c_clang_options = '-Wall -O0 -std=c99 -I ~/auto -I /opt/include -isystem /usr/local/lib/python3.5/dist-packages/numpy/core/include/  -isystem /opt/auto-stable'
let g:ale_cpp_clang_options = '-Wall -O0 -std=c++14 -I ~/auto -isystem /opt/include -isystem /usr/local/lib/python3.5/dist-packages/numpy/core/include/ -isystem /opt/3rd/wind/include -isystem /opt/auto-stable'
let g:ale_cpp_cppcheck_options = '-Wall -O0 -std=c++14 -I ~/auto -isystem /opt/include -isystem /opt/3rd/wind/include -isystem /usr/include/python3.5/ -isystem /usr/local/lib/python3.5/dist-packages/numpy/core/include/ -isystem /opt/auto-stable' 

let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_c_gcc_options = '-Wall -O0 -std=c99 -I ~/auto -I /opt/include'
let g:ale_cpp_gcc_options = '-Wall -O0 -std=c++14 -I ~/auto -isystem /opt/include -isystem /usr/include/python3.5/ -isystem /usr/local/lib/python3.5/dist-packages/numpy/core/include/' 



" let g:ale_sign_column_always = 1
" let g:ale_set_highlights = 0
"自定义error和warning图标
" let g:ale_sign_error = '✗'
" let g:ale_sign_warning = '⚡'
"在vim自带的状态栏中整合ale
" let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
"显示Linter名称,出错或警告等相关信息
" let g:ale_echo_msg_error_str = 'E'
" let g:ale_echo_msg_warning_str = 'W'
" let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
"普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
"<Leader>s触发/关闭语法检查
" nmap <Leader>s :ALEToggle<CR>
" "<Leader>d查看错误或警告的详细信息
" nmap <Leader>d :ALEDetail<CR>



" 代码自动补全
"迄今为止用到的最好的自动VIM自动补全插件
"重启 :YcmRestartServer
Plug 'Valloric/YouCompleteMe'
"youcompleteme  默认tab  s-tab 和自动补全冲突
"let g:ycm_key_list_select_completion=['<c-n>']
" let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_key_list_select_completion = ['<tab>']
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_auto_trigger = 1

let g:ycm_seed_identifiers_with_syntax=1   "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开

" 跳转到定义处, 分屏打开
let g:ycm_goto_buffer_command = 'horizontal-split'
" nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <F12> :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>

" 引入，可以补全系统，以及python的第三方包 针对新老版本YCM做了兼容
" old version
let g:ycm_global_ycm_extra_conf = "~/.ycm_extra_conf.py"
let g:ycm_confirm_extra_conf = 0
let g:ycm_always_populate_location_list = 1

" 直接触发自动补全 insert模式下
" let g:ycm_key_invoke_completion = '<C-Space>'
" 黑名单,不启用
let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'gitcommit' : 1,
      \}

" 代码片段快速插入 (snippets中,是代码片段资源,需要学习)
" 从来没用过，可能是YouCompleteMe里需要的
" Plug 'SirVer/ultisnips'

" 号称可以解决函数参数自动提示的功能
" Plug 'tenfyzhong/CompleteParameter.vim'
" inoremap <silent><expr> ( complete_parameter#pre_complete("()")
" smap <c-j> <Plug>(complete_parameter#goto_next_parameter)
" imap <c-j> <Plug>(complete_parameter#goto_next_parameter)
" smap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
" imap <c-k> <Plug>(complete_parameter#goto_previous_parameter)




" 快速注释
" ,cSPACE 快速切换注释，能自动识别文件类型
Plug 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims=1


" 快速加入修改环绕字符，示例，其中*为光标位置
" Old text                  Command     New text ~
" "Hello *world!"           ds"         Hello world!
" [123+4*56]/2              cs])        (123+456)/2
" "Look ma, I'm *HTML!"     cs"<q>      <q>Look ma, I'm HTML!</q>
" if *x>3 {                 ysW(        if ( x>3 ) {
" my $str = *whee!;         vlllls'     my $str = 'whee!';
" <div>Yo!*</div>           dst         Yo!
" <div>Yo!*</div>           cst<p>      <p>Yo!</p>
"
" 总结：
" ds" 删除环绕字符"
" cs"'修改环绕字符"为'
" ysW( 选中当前大单词增加括号
" yss"整行添加"
" Plug 'tpope/vim-surround'

" for repeat -> enhance surround.vim, . to repeat command
Plug 'tpope/vim-repeat'

" 快速对齐，使用分隔符
" nmap <Leader>a= vip:EasyAlign =<CR>
" vmap <Leader>a= :EasyAlign =<CR>
" nmap <Leader>a/ vip:EasyAlign /<CR>
" vmap <Leader>a/ :EasyAlign /<CR>
" nmap <Leader>a| vip:EasyAlign |<CR>
" vmap <Leader>a| :EasyAlign |<CR>
vmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a vip<Plug>(EasyAlign)
Plug 'junegunn/vim-easy-align'
let g:easy_align_delimiters = {'/': { 'pattern':         '/\*\*<\|\*/\|//!<', 'delimiter_align': 'l', 'ignore_groups':   [] }, }
let g:easy_align_delimiters = {',': { 'pattern':         ',', 'delimiter_align': 'l', 'ignore_groups':   [] }, }


" 应该是不需要的
" Plug 'vim-scripts/matchit.zip'

" 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m<Space>  del all marks
Plug 'kshenoy/vim-signature'

" 同git diff,实时展示文件中修改的行
Plug 'airblade/vim-gitgutter'
let g:gitgutter_map_keys = 1
let g:gitgutter_enabled = 1
let g:gitgutter_highlight_lines = 0

" edit history, 可以查看回到某个历史状态
Plug 'sjl/gundo.vim'
noremap <leader>h :GundoToggle<CR>

" 状态栏增强展示，让vim最下面一行更好看点
" 新的airline配置
Plug 'bling/vim-airline'
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#loclist#enabled = 1

" 给括号显示不同颜色
Plug 'luochen1990/rainbow'
let g:rainbow_active = 1


" 当前使用的主题
Plug 'morhetz/gruvbox'


Plug 'zhangzq/python-syntax'
let g:python_highlight_all = 1
let g:python_highlight_builtins = 1


" C++文件高亮，可以识别函数名、类名等。根据语法识别，不太准确。
Plug 'zhangzq/vim-cpp-enhanced-highlight'
" let g:cpp_class_scope_highlight = 1
" let g:cpp_experimental_template_highlight = 1
"

" 增加跳转功能
" [q ]q 切换error list
" [b ]b 切换buffer
" [e ]e 当前行上移或下移
" [SPACE  ]SPACE  当前行上面或下面增加空行
" [f ]f 打开同目录下上/下一个文件
Plug 'tpope/vim-unimpaired'

" 调换函数参数或列表项
Plug 'AndrewRadev/sideways.vim'

set noshowmode
Plug 'Shougo/echodoc.vim'

" 号称可以解决函数参数自动提示的功能
" set noshowmode
" Plug 'tenfyzhong/CompleteParameter.vim'
" inoremap <silent><expr> ( complete_parameter#pre_complete("()")
" smap <c-j> <Plug>(complete_parameter#goto_next_parameter)
" imap <c-j> <Plug>(complete_parameter#goto_next_parameter)
" smap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
" imap <c-k> <Plug>(complete_parameter#goto_previous_parameter)

" nmap <m-d> <Plug>(complete_parameter#overload_down)
" imap <m-d> <Plug>(complete_parameter#overload_down)
" smap <m-d> <Plug>(complete_parameter#overload_down)


" 自动括号
" Plug 'jiangmiao/auto-pairs'


" 打开命令行面板
" 可以使用命令 :AsyncRun make -j 异步执行命令。
Plug 'skywind3000/asyncrun.vim'

" 自动打开 quickfix window ，高度为 6
let g:asyncrun_open = 6
" 任务结束时候响铃提醒
let g:asyncrun_bell = 1
" 设置 F10 打开/关闭 Quickfix 窗口
nnoremap <F10> :call asyncrun#quickfix_toggle(6)<cr>
nnoremap <F7> :wa<CR>:AsyncRun make -j<cr>:cw<CR><CR>
nmap <F7> :wa<CR>:AsyncRun make -j<CR>:cw<CR><CR>
imap <F7> <ESC>:wa<CR>:AsyncRun make -j<CR><CR><CR>

Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-syntax'
Plug 'kana/vim-textobj-function', { 'for':['c', 'cpp', 'vim', 'java'] }
Plug 'sgur/vim-textobj-parameter'

call plug#end()  

